{"remainingRequest":"/home/co/crypt/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/co/crypt/src/components/Mobile.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/co/crypt/src/components/Mobile.vue","mtime":1553520247936},{"path":"/home/co/crypt/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/co/crypt/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/home/co/crypt/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/co/crypt/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\n\nimport {GoogleCharts} from 'google-charts'\nimport axios from 'axios'\nimport DataChart from './avarageComponent.vue'\n\nexport default {\n  components:{\n    DataChart\n  },\n  data(){\n    return {\n      info: null,\n      dataArray: [],\n      change: 'bitcoin',\n      interval: 'm30',\n      intervalMilliseconds: 360000,\n      base:'ethereum',\n      timeStart:'1551599885000',\n      timeEnd:'1551686584000',\n      porogPercent:0,\n      volume:0\n    }\n  },\n\n  name: 'Main',\n\n  methods: {\n    setPorogVolumePercent(p){\n      this.volume=p;\n    },\n\n    newTimeStart(d){\n      let year = parseInt(d[0]+d[1]+d[2]+d[3]);\n      let month = parseInt(d[5]+d[6])-1;\n      let day = parseInt(d[8]+d[9]);\n      var time = new Date();\n      time.setTime(0);\n      time.setYear(year);\n      time.setMonth(month);\n      time.setDate(day);\n      this.timeStart=+time;\n    },\n\n    newTimeEnd(d){\n      let year = parseInt(d[0]+d[1]+d[2]+d[3]);\n      let month = parseInt(d[5]+d[6])-1;\n      let day = parseInt(d[8]+d[9]);\n      var time = new Date();\n      time.setTime(0);\n      time.setYear(year);\n      time.setMonth(month);\n      time.setDate(day);\n      this.timeEnd=+time;\n    },\n\n    selectTimeSet(timeLength){\n      const minute = 60000;\n      this.interval=timeLength;\n\n      switch(timeLength){\n        case \"m30\":this.intervalMilliseconds = 30*minute; break;\n        case \"m15\":this.intervalMilliseconds = 15*minute; break;\n        case \"m5\":this.intervalMilliseconds = 5*minute; break;\n        case \"h1\":this.intervalMilliseconds = 60*minute; break;\n      }\n    },\n\n    newV(v){\n      this.base=v;\n    },\n\n    setPorogPercent(p){\n      this.porogPercent=parseFloat(p);\n    },\n\n    main(){\n      this.calc(this.timeStart, this.timeEnd, this.porogPercent,\n        this.change, this.interval, this.base, 'лог консоли');\n    },\n\n    calc(timeStart, timeEnd, porogPercent,change, interval, base, consolelog){\n      const dayLenght=86400000;\n      console.log(\n        'https://api.coincap.io/v2/candles?exchange=binance&interval='+\n        interval+'&baseId='+base+'&quoteId='+change+'&start='+timeStart+'&end='\n        +timeEnd\n      );\n      \n      axios\n        .get('https://api.coincap.io/v2/candles?exchange=binance&interval='+\n          interval+'&baseId='+base+'&quoteId='+change+'&start='+timeStart+'&end='+timeEnd)\n        .then(\n          value => {\n            let info = value.data.data;\n            this.percent(info);\n            console.log(info);      \n          },reason => {\n            alert(reason);\n          }\n        );\n    },\n\n    percent(info){\n      this.info = info;\n      let dataArr=new Array;\n      console.log(\"info.lenght\", info.length)\n\n      for(let i = 1;i<info.length;i++){\n        let p = (info[i].close-info[i].open)/info[i].close*100;\n        let pVolume = (info[i].volume-info[i-1].volume)/\n                      info[i-1].volume*100;\n        \n        if ((p>this.porogPercent)&&(pVolume>this.volume)){\n          let d = new Date();\n          d.setTime(info[i].period)\n\n          dataArr.push({\n            percent:p.toFixed(2),\n            // date:d,\n            date:{\n              month:d.getMonth(),\n              year:d.getYear(),\n              day:d.getDay()\n            },\n            time:{\n              minutes:d.getMinutes(),\n              hours:d.getHours()\n            },\n            increase: ((info[i].volume-info[i-1].volume)/\n              info[i-1].volume*100).toFixed(3),\n            price: info[i].close\n          });\n        }\n      }\n\n      this.dataArray=dataArr;\n    }\n  },   \n\n  mounted(){//по загрузке\n  }\n}\n\n",{"version":3,"sources":["Mobile.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA6DA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA","file":"Mobile.vue","sourceRoot":"src/components","sourcesContent":["<template>\n  <div>\n  \n  <!-- sudo sysctl fs.inotify.max_user_watches=524288 -->\n\n  <div id=\"inf\">\n    <h1>Ищем памп</h1>\n    Курс {{base}} по отношению к {{change}}<br><br>\n    <div id=\"inputBlock\">\n      <p>введите валюту</p>\n      <input type=\"text\" @input=\"newV($event.target.value)\" value=\"ethereum\"> или выберете из списка \n      <select @input=\"newV($event.target.value)\">\n          <option>ethereum</option>\n          <option>tron</option>\n          <option>stellar</option>\n          <option>verge</option>\n          <option>zilliqa</option>\n          <option>cardano</option>\n        </select> \n      <br>\n      <p>введите временной отрезок поиска</p>\n      <input type=\"date\" @input=\"newTimeStart($event.target.value)\">\n      <input type=\"date\" @input=\"newTimeEnd($event.target.value)\">\n      <p>введите тип свечи\n        <select @input=\"selectTimeSet($event.target.value)\">\n          <option>m30</option>\n          <option>m5</option>\n          <option>m15</option>\n          <option>h1</option>\n        </select>\n      </p>\n      <p>Введите % роста цены</p>\n      <input type=\"text\" @input=\"setPorogPercent($event.target.value)\">\n      <p>Введите % роста объемов</p>\n      <input type=\"text\" @input=\"setPorogVolumePercent($event.target.value)\">\n  <!--     <p>Количество свечей выводимых на дисплей</p>\n      <input type=\"text\"> -->\n      <p>\n        <button @click=\"main()\">Рассчитать</button>\n      </p>\n    </div>\n    <!-- <p>{{info}}</p> -->\n    <div id=\"flexDiv\">\n      <div id=\"cryptoOutput\" v-for=\"data in dataArray\">\n        <div id=\"tabblock\"></div>\n        <p>{{data.date.day}}:{{data.date.month}}:{{data.date.year}}</p>\n        <p>{{data.time.hours}}:{{data.time.minutes}}</p>\n        <p>прирост цены %:{{data.percent}}</p>\n        <p>прирост объёма в % :{{data.increase}}</p>\n        <p>цена: {{data.price}}</p>\n        <!-- <DataChart time=\"Живи \"/> -->\n      </div>\n    </div>\n  </div>\n  <div id=\"chart_div\"></div>\n  \n  </div>\n</template>\n\n<script>\n\nimport {GoogleCharts} from 'google-charts'\nimport axios from 'axios'\nimport DataChart from './avarageComponent.vue'\n\nexport default {\n  components:{\n    DataChart\n  },\n  data(){\n    return {\n      info: null,\n      dataArray: [],\n      change: 'bitcoin',\n      interval: 'm30',\n      intervalMilliseconds: 360000,\n      base:'ethereum',\n      timeStart:'1551599885000',\n      timeEnd:'1551686584000',\n      porogPercent:0,\n      volume:0\n    }\n  },\n\n  name: 'Main',\n\n  methods: {\n    setPorogVolumePercent(p){\n      this.volume=p;\n    },\n\n    newTimeStart(d){\n      let year = parseInt(d[0]+d[1]+d[2]+d[3]);\n      let month = parseInt(d[5]+d[6])-1;\n      let day = parseInt(d[8]+d[9]);\n      var time = new Date();\n      time.setTime(0);\n      time.setYear(year);\n      time.setMonth(month);\n      time.setDate(day);\n      this.timeStart=+time;\n    },\n\n    newTimeEnd(d){\n      let year = parseInt(d[0]+d[1]+d[2]+d[3]);\n      let month = parseInt(d[5]+d[6])-1;\n      let day = parseInt(d[8]+d[9]);\n      var time = new Date();\n      time.setTime(0);\n      time.setYear(year);\n      time.setMonth(month);\n      time.setDate(day);\n      this.timeEnd=+time;\n    },\n\n    selectTimeSet(timeLength){\n      const minute = 60000;\n      this.interval=timeLength;\n\n      switch(timeLength){\n        case \"m30\":this.intervalMilliseconds = 30*minute; break;\n        case \"m15\":this.intervalMilliseconds = 15*minute; break;\n        case \"m5\":this.intervalMilliseconds = 5*minute; break;\n        case \"h1\":this.intervalMilliseconds = 60*minute; break;\n      }\n    },\n\n    newV(v){\n      this.base=v;\n    },\n\n    setPorogPercent(p){\n      this.porogPercent=parseFloat(p);\n    },\n\n    main(){\n      this.calc(this.timeStart, this.timeEnd, this.porogPercent,\n        this.change, this.interval, this.base, 'лог консоли');\n    },\n\n    calc(timeStart, timeEnd, porogPercent,change, interval, base, consolelog){\n      const dayLenght=86400000;\n      console.log(\n        'https://api.coincap.io/v2/candles?exchange=binance&interval='+\n        interval+'&baseId='+base+'&quoteId='+change+'&start='+timeStart+'&end='\n        +timeEnd\n      );\n      \n      axios\n        .get('https://api.coincap.io/v2/candles?exchange=binance&interval='+\n          interval+'&baseId='+base+'&quoteId='+change+'&start='+timeStart+'&end='+timeEnd)\n        .then(\n          value => {\n            let info = value.data.data;\n            this.percent(info);\n            console.log(info);      \n          },reason => {\n            alert(reason);\n          }\n        );\n    },\n\n    percent(info){\n      this.info = info;\n      let dataArr=new Array;\n      console.log(\"info.lenght\", info.length)\n\n      for(let i = 1;i<info.length;i++){\n        let p = (info[i].close-info[i].open)/info[i].close*100;\n        let pVolume = (info[i].volume-info[i-1].volume)/\n                      info[i-1].volume*100;\n        \n        if ((p>this.porogPercent)&&(pVolume>this.volume)){\n          let d = new Date();\n          d.setTime(info[i].period)\n\n          dataArr.push({\n            percent:p.toFixed(2),\n            // date:d,\n            date:{\n              month:d.getMonth(),\n              year:d.getYear(),\n              day:d.getDay()\n            },\n            time:{\n              minutes:d.getMinutes(),\n              hours:d.getHours()\n            },\n            increase: ((info[i].volume-info[i-1].volume)/\n              info[i-1].volume*100).toFixed(3),\n            price: info[i].close\n          });\n        }\n      }\n\n      this.dataArray=dataArr;\n    }\n  },   \n\n  mounted(){//по загрузке\n  }\n}\n\n</script>\n<!-- Add \"scoped\" attribute to limit CSS to this component only -->\n<style scoped>\n\n\n#flexDiv{\n  display: -webkit-flex; \n  display: inline-flex; \n  flex-direction: column; \n}\n\n  #cryptoOutput{\n/*grid-template-rows:1fr;*/\n/*grid-column: 1;*/\n    color: rgb(52, 230, 16);\n    background: rgb(16, 4, 43);\n    width: 600px;\n    /*border:5px;*/\n    position: relative;\n    /*left: 50%;*/\n    /*transform: translate(-50%, 0%);*/\n    text-align: left;\n    padding-left:15px; \n  }\n\n  #inputBlock{\n    background: grey;\n    color: black;\n  /*margin:5px;*/\n    \n      padding: 5px;\n    /*margin: 5px;*/\n    /*border: 50px;*/\n\n  }\n  #tabblock{\n    height: 10px;\n    background: black;\n  }\n  #chart_div{\n    margin:0px;\n    /*width: 850px;*/\n    position: relative;\n\n  }\n  #inf {\n    /*padding: 5px;*/\n    /*margin:0px;*/\n    background: black;\n    color: rgb(52, 230, 16);\n    position: relative;\n      /*padding: 0px;*/\n    /*margin: 0px;*/\n    /*border: 0px;*/\n  }\n  h3 {\n    /*margin: 40px 0 0;*/\n  }\n  ul {\n    list-style-type: none;\n    padding: 0;\n  }\n  li {\n    display: inline-block;\n    /*margin: 0 10px;*/\n  }\n  a {\n    color: #42b983;\n  }\n</style>\n"]}]}