{"remainingRequest":"/home/co/crypt/node_modules/babel-loader/lib/index.js!/home/co/crypt/node_modules/cache-loader/dist/cjs.js??ref--0-0!/home/co/crypt/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/co/crypt/src/components/Main.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/co/crypt/src/components/Main.vue","mtime":1555404596295},{"path":"/home/co/crypt/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/co/crypt/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/home/co/crypt/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/co/crypt/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["import _parseFloat from \"/home/co/crypt/node_modules/@babel/runtime-corejs2/core-js/parse-float\";\nimport _parseInt from \"/home/co/crypt/node_modules/@babel/runtime-corejs2/core-js/parse-int\";\nimport \"core-js/modules/es6.array.iterator\";\nimport \"core-js/modules/es6.promise\";\nimport \"core-js/modules/es6.object.assign\";\nimport \"core-js/modules/es7.promise.finally\";\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n// import {GoogleCharts} from 'google-charts'\nimport axios from 'axios';\nimport DataChart from './avarageComponent.vue';\nimport Reg from './registration.vue';\nexport default {\n  components: {\n    Reg: Reg\n  },\n  data: function data() {\n    return {\n      info: null,\n      dataArray: [],\n      change: 'bitcoin',\n      interval: 'h1',\n      intervalMilliseconds: 360000,\n      base: 'ethereum',\n      timeStart: '1551599885000',\n      timeEnd: '1551686584000',\n      porogPercent: 1,\n      volume: 0,\n      alfaPorog: 3,\n      numberApproximating: 5,\n      numberLooking: 24,\n      nLastCandels: 2,\n      lastGoodCandelIndex: -10,\n      registrationWindow: false,\n      subscribe: false\n    };\n  },\n  name: 'Main',\n  methods: {\n    showSubscribe: function showSubscribe() {\n      this.subscribe = true; // this.$emit('update:subscribe', !this.subscribe);\n      // alert(this.subscribe);\n    },\n    inputConst: function inputConst(c, box) {\n      box = c;\n    },\n    leastSquareMethod: function leastSquareMethod(arr) {\n      function kramerMethod(A, B) {\n        var d = A[0][0] * A[1][1] - A[1][0] * A[0][1];\n        var d1 = B[0] * A[1][1] - B[1] * A[0][1]; // d2 = A[0][0]*B[1][1] - A[1][0]*B[0][1]\n        // alert (d); \n\n        return d1 / d;\n      }\n\n      var sumX = 0;\n      var sumY = 0;\n      var sumX2 = 0;\n      var sumXY = 0;\n\n      for (var i in arr) {\n        sumX += arr[i].x;\n        sumX2 += arr[i].x * arr[i].x;\n        sumY += arr[i].y;\n        sumXY += arr[i].x * arr[i].y;\n      } //посчитали все коэффициенты для решение системы\n\n\n      var matrA = [[], []];\n      matrA[0][0] = sumX2;\n      matrA[0][1] = sumX;\n      matrA[1][0] = sumX;\n      matrA[1][1] = arr.length;\n      var vectB = [sumXY, sumY]; // alert(matrA)\n\n      var answ = kramerMethod(matrA, vectB); // console.log(answ);\n\n      return answ;\n    },\n    setPorogVolumePercent: function setPorogVolumePercent(p) {\n      this.volume = p;\n    },\n    newTimeStart: function newTimeStart(d) {\n      var year = _parseInt(d[0] + d[1] + d[2] + d[3]);\n\n      var month = _parseInt(d[5] + d[6]) - 1;\n\n      var day = _parseInt(d[8] + d[9]);\n\n      var time = new Date();\n      time.setTime(0);\n      time.setYear(year);\n      time.setMonth(month);\n      time.setDate(day);\n      this.timeStart = +time;\n    },\n    newTimeEnd: function newTimeEnd(d) {\n      var year = _parseInt(d[0] + d[1] + d[2] + d[3]);\n\n      var month = _parseInt(d[5] + d[6]) - 1;\n\n      var day = _parseInt(d[8] + d[9]);\n\n      var time = new Date();\n      time.setTime(0);\n      time.setYear(year);\n      time.setMonth(month);\n      time.setDate(day);\n      this.timeEnd = +time;\n    },\n    selectTimeSet: function selectTimeSet(timeLength) {\n      var minute = 60000;\n\n      switch (timeLength) {\n        case \"0\":\n          this.interval = \"m1\";\n          this.intervalMilliseconds = 1 * minute;\n          break;\n\n        case \"1\":\n          this.interval = \"m5\";\n          this.intervalMilliseconds = 5 * minute;\n          break;\n\n        case \"2\":\n          this.interval = \"m15\";\n          this.intervalMilliseconds = 15 * minute;\n          break;\n\n        case \"3\":\n          this.interval = \"m30\";\n          this.intervalMilliseconds = 30 * minute;\n          break;\n\n        case \"4\":\n          this.interval = \"h1\";\n          this.intervalMilliseconds = 60 * minute;\n          break;\n      }\n    },\n    newV: function newV(v) {\n      this.base = v;\n    },\n    setPorogPercent: function setPorogPercent(p) {\n      this.porogPercent = _parseFloat(p);\n    },\n    main: function main() {\n      this.lastGoodCandelIndex = -10;\n      this.calc(this.timeStart, this.timeEnd, this.porogPercent, this.change, this.interval, this.base, 'лог консоли');\n    },\n    calc: function calc(timeStart, timeEnd, porogPercent, change, interval, base, consolelog) {\n      var _this = this;\n\n      var dayLenght = 86400000;\n      console.log('https://api.coincap.io/v2/candles?exchange=binance&interval=' + interval + '&baseId=' + base + '&quoteId=' + change + '&start=' + timeStart + '&end=' + timeEnd);\n      this.dataArray = [];\n      axios.get('https://api.coincap.io/v2/candles?exchange=binance&interval=' + interval + '&baseId=' + base + '&quoteId=' + change + '&start=' + timeStart + '&end=' + timeEnd).then(function (value) {\n        var info = value.data.data;\n\n        _this.percent(info);\n\n        console.log(info);\n      }, function (reason) {\n        var msg;\n\n        switch (_this.interval) {\n          case \"h1\":\n            msg = \"30 суток\";\n            break;\n\n          case \"m30\":\n            msg = \"14 суток\";\n            break;\n\n          case \"m15\":\n            msg = \"7 суток\";\n            break;\n\n          case \"m5\":\n            msg = \"2 суток\";\n            break;\n\n          case \"m1\":\n            msg = \"сутки\";\n            break;\n        }\n\n        alert(reason + '\\nданные свечи можно смотреть не более чем за ' + msg); // alert(reason);\n      });\n    },\n    percent: function percent(info) {\n      var _this2 = this;\n\n      this.info = info;\n      var dataArr = new Array();\n      console.log(\"info.lenght\", info.length);\n      var k = this.numberApproximating - 1; //смотрим 5 свечи\n\n      ; //index последней хорошей свечи\n\n      for (var i = k; i < info.length; i++) {\n        // console.log(info[i])\n        var alfaFunction = function alfaFunction(data, index, k) {\n          var Arr = [];\n          var K = 100000000;\n\n          for (var _i = 0; _i <= k; _i++) {\n            Arr[_i] = {\n              x: _i,\n              y: (data[index - k + _i].close - data[index].close) * K\n            };\n          } // console.log(Arr);\n\n\n          return _this2.leastSquareMethod(Arr);\n        };\n\n        var p = (info[i].close - info[i].open) / info[i].close * 100;\n        var pVolume = (info[i].volume - info[i - 1].volume) / info[i - 1].volume * 100;\n        var alfa = alfaFunction(info, i, k); // console.log(alfa,alfa > this.alfaPorog);\n        // if ( (p > this.porogPercent) && (pVolume > this.volume) ){\n        // if ((alfa > this.alfaPorog) && ((this.lastGoodCandelIndex+this.nLastCandels) < (i+1) ))  {\n\n        if (alfa > this.alfaPorog) {\n          // alert(this.lastGoodCandelIndex);\n          // this.lastGoodCandelIndex = i;\n          // alert(this.lastGoodCandelIndex);\n          //функция вычисления цвета плитки\n          var color = function color(k, porog) {\n            var p = k - porog * 1.5;\n            var alfa = 30 * porog;\n            var g = 28;\n            var r = 16;\n\n            if (p > 0) {\n              g = g + alfa * p;\n            } else {\n              r = r - alfa * p;\n            }\n\n            if (r > 100) r = 100;\n            if (g > 100) g = 100;\n            return \"background:rgb(\" + r + \",\" + g + \",40)\";\n          }; //функция вычисления наибольшего значения за l севчей\n\n\n          var maxSpike = function maxSpike(data, index, l) {\n            //data данных\n            var a = 1000;\n\n            var max = _parseFloat(data[index + 1].close);\n\n            if (data.length - index - l < 0) return \" нетю \";\n\n            for (var _i2 = index + 1; _i2 < index + l; _i2++) {\n              max = Math.max(max, _parseFloat(data[_i2].close));\n            }\n\n            return (max * a - _parseFloat(data[index].close) * a) / (_parseFloat(data[index].close) * a) * 100;\n          };\n\n          var spike = _parseFloat(maxSpike(info, i, this.numberLooking)).toFixed(2);\n\n          var d = new Date();\n          d.setTime(info[i].period); // d = d.toString();\n\n          dataArr.push({\n            percent: p.toFixed(2),\n            unix: info[i].period,\n            date: {\n              month: d.getMonth() + 1,\n              year: d.getYear(),\n              day: d.getDate()\n            },\n            time: {\n              minutes: d.getMinutes(),\n              hours: d.getHours()\n            },\n            increase: ((info[i].volume - info[i - 1].volume) / info[i - 1].volume * 100).toFixed(3),\n            price: _parseFloat(info[i].close).toFixed(8),\n            maxInf: spike,\n            background: color(spike, 2),\n            alfa: alfa.toFixed(2) // \"background:rgb(16, 128, 40)\"\n\n          });\n        }\n      } // alert(this.dataArray.length)\n\n\n      this.dataArray = dataArr;\n    }\n  },\n  mounted: function mounted() {//по загрузке\n    //   let Arr = [\n    //     {x: 1,y: 1},\n    //     {x: 2,y: 2},\n    //     {x: 3,y: 4},\n    //     {x: 4,y: 8},\n    //     {x: 5,y: 10},\n    //   ]\n    //   alert(this.leastSquareMethod(Arr));\n  }\n};",{"version":3,"sources":["Main.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\n  <div>\n    <div class=\"app_header\">\n      <div>\n        <img alt=\"Vue logo\" src=\"../assets/pump.gif\" width=\"100%\">\n      </div>\n\n      <div class=\"header\">\n        <h1>Crypt</h1>\n        <p>мы сервис информирующий вас о росте криптовалют</p>\n\n        Курс {{base}} по отношению к {{change}}<br><br>\n        \n        <button  @click=\"showSubscribe()\" >Подписаться на рассылку</button>\n        <!-- <div v-if=\"subscribe\"> -->\n\n        <!-- </div> -->\n        <!-- <div class=\"night\"></div> -->\n      </div>\n    </div>\n\n    <div class=\"link\">\n    <div class=\"app_grey-baground-black-text\">\n      \n    <div class=\"form-group\">\n\n      <div v-if=\"subscribe\"> <Reg /></div>\n\n      <a href=\"#form-input-block\"> выберите монету </a>\n      <!-- <p>выберите монету</p>  -->\n       <p><a name=\"form-input-block\"></a></p>\n      <select @input=\"newV($event.target.value)\">\n        <option>ethereum</option>\n        <option>tron</option>\n        <option>stellar</option>\n        <option>verge</option>\n        <option>zilliqa</option>\n        <option>cardano</option>\n      </select> \n\n      <p>или введите свою</p>\n      <p><input type=\"text\" @input=\"newV($event.target.value)\" value=\"\"></p> \n\n      <p>ищем от</p>\n        <p><input type=\"date\" @input=\"newTimeStart($event.target.value)\"></p>\n      <p>и до</p>\n        <p><input class=\"form-control\" type=\"date\" @input=\"newTimeEnd($event.target.value)\"></p>\n      <p>свеча: {{interval}}</p>\n\n      <input class=\"form-control\" type=\"range\" min=\"0\" max=\"4\" step=\"1\" @input=\"selectTimeSet($event.target.value)\">\n\n      <p>угловой коэффициент {{alfaPorog}}</p>\n      <input class=\"form-control\" type=\"range\" min=\"0\" max=\"10\" step=\"0.01\" value=\"1\" @input=\"alfaPorog = $event.target.value\">\n\n      <p>анализируем {{numberApproximating }} свечей</p>\n      <input class=\"form-control\" type=\"range\" min=\"1\" max=\"10\" step=\"1\" value=\"5\" @input=\"numberApproximating = $event.target.value\">\n\n      <p>ожидание роста {{numberLooking}} свечей</p>\n      <input class=\"form-control\" type=\"range\" min=\"1\" max=\"40\" step=\"1\" value=\"24\" @input=\"numberLooking = $event.target.value\">\n\n      <p> <button class=\"form-control\" @click=\"main()\">ПОКАЗАТЬ</button> </p>\n    </div>\n    </div>\n    </div>\n\n    <div class = \"app_black-baground-green-text\">\n      <div class=\"center\">\n        <div class=\"card-deck\">\n          <div v-for=\"data in dataArray\">\n            <div class=\"app_wide-perpl-block\" v-bind:style=\"data.background\">\n                <div class=\"card-header\">{{data.price}} BTC</div>\n                <p> угол : {{data.alfa}}</p>\n                <p>Максимальный прирост %: {{data.maxInf}} </p>\n                <div class=\"card-body\">\n                  <h5 class=\"card-title\">прирост цены %:{{data.percent}}</h5>\n                  <h5>объёма %:{{data.increase}}</h5>\n                  <p class=\"card-text\">\n                  <p>Миллисекунды</p>\n                  <p>{{data.unix}}</p>\n                  <p>Время</p>\n                  <p>{{data.time.hours}}:{{data.time.minutes}}</p></p>\n                  <p>Дата:</p>\n                  <p>{{data.date.day}}:{{data.date.month}}</p>\n                </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  \n</div>\n\n\n</template>\n\n<script>\n\n// import {GoogleCharts} from 'google-charts'\nimport axios from 'axios'\nimport DataChart from './avarageComponent.vue'\nimport Reg from './registration.vue'\n\nexport default {\n  components:{\n    Reg\n  },\n  data(){\n    return {\n      info: null,\n      dataArray: [],\n      change: 'bitcoin',\n      interval: 'h1',\n      intervalMilliseconds: 360000,\n      base:'ethereum',\n      timeStart:'1551599885000',\n      timeEnd:'1551686584000',\n      porogPercent:1,\n      volume:0,\n      alfaPorog:3,\n      numberApproximating:5,\n      numberLooking:24,\n      nLastCandels:2,\n      lastGoodCandelIndex:-10,\n      registrationWindow:false,\n      subscribe:false,\n    }\n  },\n\n  name: 'Main',\n\n  methods: {\n    showSubscribe(){\n      this.subscribe = true;\n      // this.$emit('update:subscribe', !this.subscribe);\n\n      // alert(this.subscribe);\n    },\n\n    inputConst(c,box){\n      box = c;\n    },\n\n    leastSquareMethod(arr){\n      \n      function kramerMethod(A, B){\n        let d  = A[0][0]*A[1][1] - A[1][0]*A[0][1];\n        let d1 = B[0]*A[1][1] - B[1]*A[0][1];\n        // d2 = A[0][0]*B[1][1] - A[1][0]*B[0][1]\n        // alert (d); \n        return d1/d;\n      }\n\n      let sumX = 0;\n      let sumY = 0;\n      let sumX2 = 0;\n      let sumXY = 0\n      for (let i in arr){\n        sumX += arr[i].x;\n        sumX2 += arr[i].x * arr[i].x;\n        sumY += arr[i].y;\n        sumXY += arr[i].x * arr[i].y;\n      }\n      //посчитали все коэффициенты для решение системы\n      let matrA = [[], []];\n      matrA[0][0] = sumX2;\n      matrA[0][1] = sumX;\n      matrA[1][0] = sumX;\n      matrA[1][1] = arr.length;\n      let vectB = [sumXY, sumY];\n\n      // alert(matrA)\n\n      let answ = kramerMethod(matrA,vectB);\n      // console.log(answ);\n      return answ;\n\n    },\n\n    setPorogVolumePercent(p){\n      this.volume=p;\n    },\n\n    newTimeStart(d){\n      let year = parseInt(d[0] + d[1] + d[2] + d[3]);\n      let month = parseInt(d[5] + d[6]) - 1;\n      let day = parseInt(d[8] + d[9]);\n      var time = new Date();\n      time.setTime(0);\n      time.setYear(year);\n      time.setMonth(month);\n      time.setDate(day);\n      this.timeStart =+ time;\n    },\n\n    newTimeEnd(d){\n      let year = parseInt(d[0] + d[1] + d[2] + d[3]);\n      let month = parseInt(d[5] + d[6]) - 1;\n      let day = parseInt(d[8] + d[9]);\n      var time = new Date();\n      time.setTime(0);\n      time.setYear(year);\n      time.setMonth(month);\n      time.setDate(day);\n      this.timeEnd =+ time;\n    },\n\n    selectTimeSet(timeLength){\n      const minute = 60000;\n\n      switch(timeLength){\n        case \"0\":\n          this.interval = \"m1\";\n          this.intervalMilliseconds = 1 * minute; \n        break;\n        case \"1\":\n          this.interval = \"m5\";\n          this.intervalMilliseconds = 5 * minute; \n        break;\n        case \"2\":\n          this.interval = \"m15\";\n          this.intervalMilliseconds = 15 * minute;\n        break;\n        case \"3\":\n          this.interval = \"m30\";\n          this.intervalMilliseconds = 30 * minute; \n        break;\n        case \"4\":\n          this.interval = \"h1\";\n          this.intervalMilliseconds = 60 * minute; \n        break;\n      }\n    },\n\n    newV(v){\n      this.base=v;\n    },\n\n    setPorogPercent(p){\n      this.porogPercent=parseFloat(p);\n    },\n\n    main(){\n      this.lastGoodCandelIndex = -10;\n      this.calc(this.timeStart, this.timeEnd, this.porogPercent,\n        this.change, this.interval, this.base, 'лог консоли');\n    },\n\n    calc(timeStart, timeEnd, porogPercent,change, interval, base, consolelog){\n      const dayLenght = 86400000;\n      console.log(\n        'https://api.coincap.io/v2/candles?exchange=binance&interval=' +\n        interval + '&baseId=' + base + '&quoteId=' + change + '&start=' \n        + timeStart + '&end=' + timeEnd\n      );\n      this.dataArray =[];\n      \n      axios\n        .get('https://api.coincap.io/v2/candles?exchange=binance&interval=' +\n          interval + '&baseId=' + base + '&quoteId=' + change + '&start=' +\n          timeStart + '&end=' + timeEnd)\n        .then(\n          value => {\n            let info = value.data.data;\n            this.percent(info);\n            console.log(info);      \n          },reason => {\n            let msg;\n            switch(this.interval){\n              case \"h1\":\n                msg = \"30 суток\";\n              break;\n              case \"m30\":\n                msg = \"14 суток\";\n              break;\n              case \"m15\":\n                msg = \"7 суток\";\n              break;\n              case \"m5\":\n                msg = \"2 суток\";\n              break;\n              case \"m1\":\n                msg = \"сутки\";\n              break;\n            }\n            alert (reason+'\\nданные свечи можно смотреть не более чем за '+msg)\n            // alert(reason);\n          }\n        );\n    },\n\n    percent(info){\n      this.info = info;\n      let dataArr = new Array;\n      console.log(\"info.lenght\", info.length)\n\n      let k = this.numberApproximating -1; //смотрим 5 свечи\n\n      ; //index последней хорошей свечи\n      for(let i = k; i < info.length; i++){\n        // console.log(info[i])\n        \n        let alfaFunction = (data, index, k)=> {\n          let Arr = [];\n          const K = 100000000;\n          for (let i = 0; i <= k; i++ )\n            Arr[i] = {x: i, y: (data[index -k +i].close - data[index].close)*K};\n          // console.log(Arr);\n          return (this.leastSquareMethod (Arr) );\n        } \n        let p = (info[i].close - info[i].open) / info[i].close * 100;\n        \n        let pVolume = (info[i].volume-info[i-1].volume) /\n                      info[i-1].volume * 100;\n        \n        let alfa = alfaFunction(info,i,k);\n        // console.log(alfa,alfa > this.alfaPorog);\n\n        // if ( (p > this.porogPercent) && (pVolume > this.volume) ){\n        // if ((alfa > this.alfaPorog) && ((this.lastGoodCandelIndex+this.nLastCandels) < (i+1) ))  {\n        if (alfa > this.alfaPorog){ \n          // alert(this.lastGoodCandelIndex);\n          // this.lastGoodCandelIndex = i;\n          // alert(this.lastGoodCandelIndex);\n          //функция вычисления цвета плитки\n          let color = ( k,porog ) =>{\n              let p= k - porog*1.5;\n              const alfa = 30 * porog;\n              let g=28;\n              let r=16;\n              if(p > 0){\n                g = g + alfa * p;\n              } else {\n                r = r - alfa * p;\n              }\n\n              if(r > 100 ) r = 100; \n              if(g > 100 ) g = 100;\n\n              return(\"background:rgb(\"+r+\",\"+g+\",40)\");\n            }\n\n          //функция вычисления наибольшего значения за l севчей\n          let maxSpike = (data, index, l) => { //data данных\n            const a = 1000;\n            let max = parseFloat(data[index+1].close);\n            \n            if (data.length - index - l < 0)\n              return \" нетю \";\n\n            for(let i = index+1; i < index+l; i++)\n              max = Math.max(max, parseFloat(data[i].close));\n\n            return (max*a - parseFloat(data[index].close)*a)/(parseFloat(data[index].close)*a)*100;\n          }\n          let spike = parseFloat(maxSpike(info, i, this.numberLooking)).toFixed(2);\n\n          let d = new Date();\n          d.setTime(info[i].period)\n          // d = d.toString();\n          dataArr.push({\n            percent:p.toFixed(2),\n            unix:info[i].period,\n            date:{\n              month:(d.getMonth()+1),\n              year:d.getYear(),\n              day:d.getDate()\n            },\n            time:{\n              minutes:d.getMinutes(),\n              hours:d.getHours()\n            },\n            increase: ( (info[i].volume-info[i-1].volume) /\n                        info[i-1].volume*100 \n                      ).toFixed(3),\n            price: parseFloat(info[i].close).toFixed(8),\n            maxInf: spike,\n            background:color(spike,2),\n            alfa: alfa.toFixed(2),\n            // \"background:rgb(16, 128, 40)\"\n          });\n        }\n      }\n      // alert(this.dataArray.length)\n      this.dataArray = dataArr;\n    }\n  },   \n\n  mounted(){//по загрузке\n  //   let Arr = [\n  //     {x: 1,y: 1},\n  //     {x: 2,y: 2},\n  //     {x: 3,y: 4},\n  //     {x: 4,y: 8},\n  //     {x: 5,y: 10},\n  //   ]\n  //   alert(this.leastSquareMethod(Arr));\n  }\n}\n\n</script>\n<!-- Add \"scoped\" attribute to limit CSS to this component only -->\n<!-- <style scoped> -->\n<style>\n\n\nh1{\n  margin: 0px;\n  line-height:22px;\n}\n\ninput[type=range] {\n-webkit-appearance: none;\nheight: 3px;\n}\n\n\n/* Бегунок в Хроме */\n\ninput[type=range]::-webkit-slider-thumb {\n\nheight: 30px;\nwidth: 30px;\nborder-radius: 50%/50%;\nbackground:white; /*#2c3e50;*/\ncursor: pointer;\n-webkit-appearance: none;\n/*margin-top: -14px;*/\n}\n\n/* Бегунок в Мозиле */\n\ninput[type=range]::-moz-range-thumb {\nbox-shadow: 1px 1px 1px #000;\nborder: 1px solid #000000;\nheight: 36px;\nwidth: 16px;\nborder-radius: 40%/60%;\nbackground: #ffffff;\ncursor: pointer;\n}\n\ninput,select,button  {\n  font-size: 16px;\n  height: 30px;\n  width: 100%;\n  text-align: center;\n  border: none;\n  background: white;\n  text-align-last: center; \n  /*border-bottom: 1px solid #ccc;*/\n}\nbutton {\n  background: #64B981;\n  /*border: none;*/\n  color: white;\n  /*width: 100%;*/\n  height: 60px;\n}\n\n.link a {\n  display: block;\n}\n\na{\n  text-decoration:none;\n  color: white;\n}\n\n @media (min-device-width: 650px){\n  .app_header{\n    display: -webkit-flex;\n    display: inline-flex; \n    flex-direction: row;\n    /*display: table-column;*/\n  }\n  .form-group{\n    font-size: 25px;\n    /*line-height: 0px;*/\n    /*margin:0px;*/\n    width: 650px;\n     display: -webkit-flex;\n    display: inline-flex; \n    flex-direction: column;\n  }\n\n }\n @media (max-device-width: 650px){\n  .app_header{\n    width: 100%;\n\n    /*background: green;*/\n  }\n  .form-group{\n    padding: 5px;\n  }\n  \n }\n .center{\n    background: #2c3e50; \n    display: flex;\n    align-items: center;\n    align-content: center; \n    justify-content: center; \n }\n .card-deck{\n  /*background: yellow;*/\n  display: grid;\n  width: 100%;\n\n\n }\n\n @media (max-device-width: 450px){\n   .card-deck{\n    grid-template-columns: 1fr;\n    width: 100%;\n  }\n }\n  @media (min-device-width: 450px) and (max-device-width: 600px){\n   .card-deck{\n    grid-template-columns: 1fr 1fr;\n    max-width: 650px;\n    /*width: 100%;*/\n  }\n }\n@media (min-device-width: 600px){\n   .card-deck{\n    grid-template-columns: 1fr 1fr 1fr;\n    width: 660px;\n  }\n  .header{\n     max-width: 300px;\n  }\n }\n\n  .header{\n    padding: 10px;\n    font-size: 15 px;\n    text-align: left;\n   \n  }\n\n\n  .app_grey-baground-black-text{\n    background:#2c3e50;/*-------------*/\n    color: white;\n    width: 100%;\n    /*min-width: 350px;*/\n    /*padding-top: 5px;*/\n    padding-bottom: 5px;\n  }\n\n  .app__flexDiv{\n    display: -webkit-flex; \n    display: inline-flex; \n    flex-direction: column; \n  }\n\n  .app_wide-perpl-block{\n    background: #101C28;\n    color: #ABC18A;\n    /*width: 200px;*/\n    width: 100%-10px;\n    padding: 5px;\n    margin:5px;\n    /*position: relative;*/\n    text-align: left;\n  }\n  \n  .about{\n    padding: 5px;\n    background: #152D41;\n    color: white;\n  }\n.night{\n  background: black;\n  position: fixed;\n  top: 0;\n  left: 0;\n  width: 100%;\n  height: 100%;\n}\n</style>\n"],"sourceRoot":"src/components"}]}